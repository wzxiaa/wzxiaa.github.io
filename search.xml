<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Build Blog with Hexo + Github + NexT</title>
    <url>/2020/hello-world/</url>
    <content><![CDATA[<p>This is my very first blog post on how to build a blog site powered by <a href="http://Github.io">Github.io</a>, Hexo and NexT. It won’t take even 10 minutes to set things up and running. It is fairly simple and easy to maintain. Let’s get started!</p>
<a id="more"></a>
<h2 id="installation"><a class="markdownIt-Anchor" href="#installation"></a> Installation</h2>
<h3 id="install-nodejs-npm-with-homebrew"><a class="markdownIt-Anchor" href="#install-nodejs-npm-with-homebrew"></a> Install Node.js &amp; npm with Homebrew</h3>
<p>More info: <a href="https://nodejs.org/en/download/package-manager/">Node.js</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install node</span><br></pre></td></tr></table></figure>
<h3 id="install-hexo"><a class="markdownIt-Anchor" href="#install-hexo"></a> Install <a href="https://hexo.io/docs/">Hexo</a></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h3 id="initialize-hexo-blog-project"><a class="markdownIt-Anchor" href="#initialize-hexo-blog-project"></a> Initialize Hexo Blog project</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init hexo-site</span><br><span class="line">$ <span class="built_in">cd</span> hexo-site</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<h3 id="install-theme-next"><a class="markdownIt-Anchor" href="#install-theme-next"></a> Install Theme - <a href="https://theme-next.js.org/docs/getting-started/">NexT</a></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo-site</span><br><span class="line">$ ls</span><br><span class="line">_config.yml  node_modules  package-lock.json  package.json  scaffolds  <span class="built_in">source</span>  themes</span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<h2 id="githubio"><a class="markdownIt-Anchor" href="#githubio"></a> <a href="http://Github.io">Github.io</a></h2>
<h3 id="create-a-repository-on-github-with-name-usernamegithubio"><a class="markdownIt-Anchor" href="#create-a-repository-on-github-with-name-usernamegithubio"></a> Create a repository on Github with name {username}.github.io:</h3>
<p><img src="/2020/hello-world/github.png" alt="github" /></p>
<h3 id="install-hexo-git-plugin"><a class="markdownIt-Anchor" href="#install-hexo-git-plugin"></a> Install hexo git plugin</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h2 id="configuration"><a class="markdownIt-Anchor" href="#configuration"></a> Configuration</h2>
<h3 id="deploy-on-github"><a class="markdownIt-Anchor" href="#deploy-on-github"></a> Deploy on Github</h3>
<p>Modify the <code>deploy</code> in  <code>hexo-site/_config.yml</code> file:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/&#123;username&#125;/&#123;username&#125;.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>
<h3 id="set-next-as-theme"><a class="markdownIt-Anchor" href="#set-next-as-theme"></a> Set NexT as Theme</h3>
<p>Again, modify the <code>theme</code> in the same <code>hexo-site/_config.yml</code> file</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>Now you can access the local bog site at <a href="http://localhost:4000">http:localhost:4000</a></p>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>Now your project has been deployed to Github repository and you can access your blog site at <a href="%7Busername%7D.github.io">{username}.github.io</a></p>
<h2 id="additional-information"><a class="markdownIt-Anchor" href="#additional-information"></a> Additional Information</h2>
<p>Now you are ready to start working on the blog. More Hexo configuration guide can be found at:</p>
<p><a href="https://hexo.io/docs/configuration.html">https://hexo.io/docs/configuration.html</a></p>
<p>Documentation for NexT theme setting can be found at:</p>
<p><a href="https://theme-next.js.org/docs/theme-settings/">https://theme-next.js.org/docs/theme-settings/</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Collections.List 集合工具类一(List)</title>
    <url>/2020/java-collections-list/</url>
    <content><![CDATA[<p>Java Collections Framework is one of the most essential Java API. The API provides implementations of standard data structure in Java-like linked list, set, stack, queue, hash table, priority queue and others. A <code>collection</code> represents a single unit of objects. The <code>collection framework</code> represents a unified architecture for storing and manipulating a group of objects</p>
<p><img src="/2020/java-collections-list/overview.jpg" alt="overview" /></p>
<a id="more"></a>
<h1 id="collections"><a class="markdownIt-Anchor" href="#collections"></a> Collections</h1>
<h2 id="list-interface"><a class="markdownIt-Anchor" href="#list-interface"></a> List Interface</h2>
<p>The <code>List</code> interface provides a way to store the ordered collection. It is a child interface of <a href="https://www.geeksforgeeks.org/collections-in-java-2/">Collection</a>. It is an ordered collection of objects in which duplicate values can be stored. Since List preserves the insertion order, it allows positional access and insertion of elements.</p>
<h3 id="arraylist"><a class="markdownIt-Anchor" href="#arraylist"></a> <code>ArrayList</code></h3>
<p>Resizable-array implementation of the <code>List</code> interface. Permits all elements, including <code>null</code>. <code>ArrayList</code> is <code>not synchronized</code>. ArrayList implements <code>RandomAccess</code>, <code>Cloneable</code>, <code>Serializable</code>. Its equivalent synchronized class in Java is <code>Vector</code>.</p>
<p>Default capacity of ArrayList is 10. Once maximum capacity is reached, it increments as following:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">New capacity &#x3D; (current capacity * 3&#x2F;2) + 1</span><br></pre></td></tr></table></figure>
<p>Upon every increment cycle, ArrayList increases it size by around <em><strong>50%</strong></em> of original.</p>
<p>Dynamic expansion:</p>
<ul>
<li>Creates a bigger sized memory on heap memory.</li>
<li>Copies the current memory elements to the new memory.</li>
<li>New items added to the new memory.</li>
<li>Delete the old memory</li>
</ul>
<hr />
<h4 id="getint-index-method"><a class="markdownIt-Anchor" href="#getint-index-method"></a> Get(int index) Method</h4>
<blockquote>
<p>Simply returns the element at the specified position in this list.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h4 id="adde-e-method"><a class="markdownIt-Anchor" href="#adde-e-method"></a> Add(E e) Method</h4>
<blockquote></blockquote>
<p>Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                     size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h4 id="capacity-expansion"><a class="markdownIt-Anchor" href="#capacity-expansion"></a> Capacity Expansion</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">        <span class="comment">// any size if not default element table</span></span><br><span class="line">        ? <span class="number">0</span></span><br><span class="line">        <span class="comment">// larger than default for default empty table. It&#x27;s already</span></span><br><span class="line">        <span class="comment">// supposed to be at default size.</span></span><br><span class="line">        : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h3 id="linkedlist"><a class="markdownIt-Anchor" href="#linkedlist"></a> <code>LinkedList</code></h3>
<p>Doubly-linked list implementation of the <code>List</code> and <code>Deque</code> interfaces. Implements all optional list operations, and permits all elements (including <code>null</code>). Operations that index into the list will traverse the list from the beginning or the end, whichever is closer to the specified index. <code>LinkedList</code> is <code>not synchronized</code>. LinkedList implements <code>Serializable</code>, <code>Cloneable</code>, <code>Deque&lt;E&gt;</code>, <code>Queue&lt;E&gt;</code>.</p>
<p>Acts like a dynamic array:</p>
<ul>
<li>No need to specify the size upon initialization.</li>
<li>Size increases dynamically (add, remove)</li>
<li>Elements are not stored in continuous fashion.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Add Elements</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span>	# appends the specific element to the end of the list</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> # inserts the specified element at specified position</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt;c)</span> # appends all of the elements to the end</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> # inserts the element at the beginning</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> # appends the element at the end</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"># Search Elements</span></span><br><span class="line"><span class="function">Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> # returns the element at specified position</span></span><br><span class="line"><span class="function">Object <span class="title">getFirst</span><span class="params">()</span> # returns the first element</span></span><br><span class="line"><span class="function">object <span class="title">getLast</span><span class="params">()</span> # returns the last element</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># Update Elements</span></span><br><span class="line"><span class="function">E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> # replace the element at the specified position</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"># Remove Elements</span></span><br><span class="line"><span class="function">E <span class="title">remove</span><span class="params">()</span> # removes the element at the beginning</span></span><br><span class="line"><span class="function">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> # removes the element at the specified position</span></span><br><span class="line"><span class="function">E <span class="title">removeFirst</span><span class="params">()</span> # removes and returns the first element</span></span><br><span class="line"><span class="function">E <span class="title">removeLast</span><span class="params">()</span> # removes and returns the last element</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># Retrieve <span class="title">Elements</span> <span class="params">(does not remove)</span></span></span><br><span class="line"><span class="function">E <span class="title">peek</span><span class="params">()</span> # retrieves, but does not remove the first <span class="title">element</span> <span class="params">(head)</span></span></span><br><span class="line"><span class="function">E <span class="title">peekFirst</span><span class="params">()</span> # retrieves, but does not remove the first <span class="title">element</span> <span class="params">(returns <span class="keyword">null</span> <span class="keyword">if</span> empty)</span></span></span><br><span class="line"><span class="function">E <span class="title">peekLast</span><span class="params">()</span> # retrieves, but does not remove the last <span class="title">element</span> <span class="params">(returns <span class="keyword">null</span> <span class="keyword">if</span> empty)</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># Retrieve <span class="title">Elements</span> <span class="params">(and remove)</span></span></span><br><span class="line"><span class="function">E <span class="title">poll</span><span class="params">()</span> # retrieves, and removes the first <span class="title">element</span> <span class="params">(head)</span></span></span><br><span class="line"><span class="function">E <span class="title">pollFirst</span><span class="params">()</span> # retrieves and removes the first <span class="title">element</span> <span class="params">(returns <span class="keyword">null</span> <span class="keyword">if</span> empty)</span></span></span><br><span class="line"><span class="function">E <span class="title">pollLast</span><span class="params">()</span> # retrieves and removes the last <span class="title">element</span> <span class="params">(returns <span class="keyword">null</span> <span class="keyword">if</span> empty)</span>  </span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"># Stack like operation</span></span><br><span class="line"><span class="function">E <span class="title">pop</span><span class="params">()</span> # pops an element from the stack represented by <span class="keyword">this</span> list</span></span><br><span class="line"><span class="function">E <span class="title">push</span><span class="params">(E e)</span> # pushes an element onto the stack represented by <span class="keyword">this</span> list</span></span><br></pre></td></tr></table></figure>
<hr />
<h3 id="vector"><a class="markdownIt-Anchor" href="#vector"></a> <code>Vector</code></h3>
<p>The <strong>Vector</strong> class implements a growable array of objects. Vectors basically fall in legacy classes but now it is fully compatible with collections. It can grow or shrink as required. <code>Vector</code> is similar to <code>ArrayList</code> but it is <code>synchronized</code>. Rarely used in non-thread environment due to poor performance in add, search, delete and update operations.</p>
<p>If the vector increment is not specified then it’s capacity will be doubled in every increment cycle.</p>
<hr />
<h3 id="stack"><a class="markdownIt-Anchor" href="#stack"></a> <code>Stack</code></h3>
<p>The <code>Stack</code> class is based on the basic principle of <code>last-in-first-out</code>. In addition to the basic push and pop operations, the class provides three more functions of empty, search, and peek.</p>
<p>A more complete and consistent set of LIFO stack operations is provided by the <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Deque.html"><code>Deque</code></a> interface and its implementations,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Deque&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;Integer&gt;();</span><br></pre></td></tr></table></figure>
<p>Generally, <code>Deque</code> is better as:</p>
<ul>
<li>in terms of object orient design as it is an interface whereas <code>Stack</code> is a class. Using <code>Deque</code>removes the dependency on concret <code>Stack</code> class.</li>
<li><code>Stack</code> extends <code>Vector</code> and allows elements to be accessed by index. It is inconsistent with what general LIFO data structures should provide for.</li>
<li>Performance. <code>Stack</code> is synchronized which could introduce performance overheads.</li>
</ul>
<hr />
<h3 id="performance-comparison"><a class="markdownIt-Anchor" href="#performance-comparison"></a> Performance Comparison</h3>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">ArrayList</th>
<th style="text-align:center">LinkedList</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">get(index)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">O(n)</td>
</tr>
<tr>
<td style="text-align:center">add(E)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">add(index, E)</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(n)</td>
</tr>
<tr>
<td style="text-align:center">remove(index)</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(n)</td>
</tr>
</tbody>
</table>
<p>Time complexity:</p>
<p><code>ArrayList</code> is <em><strong>faster</strong></em> for <em><strong>accessing</strong></em> specific elements as it allows <code>RandomAccess</code>. Especially slow for deleting at middle.</p>
<p><code>LinkedList</code> is <em><strong>faster</strong></em> for <em><strong>adding</strong></em> and <em><strong>deleting</strong></em> elements. It is <code>slow</code> to access an element.</p>
]]></content>
      <categories>
        <category>Java Road Map</category>
      </categories>
      <tags>
        <tag>Java Basics</tag>
        <tag>Collections</tag>
        <tag>List</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Collections.Set 集合工具类二(Set)</title>
    <url>/2020/java-collections-set/</url>
    <content><![CDATA[<h2 id="set-interface-overview"><a class="markdownIt-Anchor" href="#set-interface-overview"></a> Set Interface Overview</h2>
<p><img src="/2020/java-collections-set/overview.jpg" alt="overview" /></p>
<p>A <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Set.html"><code>Set</code></a> is a <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html"><code>Collection</code></a> that cannot contain duplicate elements. It contains only methods inherit from <code>Collection</code> and adds the restriction that duplicate elements are prohibited. <code>Set</code> adds a strong contract on the behavior of the <code>equals</code> and <code>hashCode</code> operations. Two sets are equal if if they contain the same elements.</p>
]]></content>
      <categories>
        <category>Java Road Map</category>
      </categories>
      <tags>
        <tag>Java Basics</tag>
        <tag>Collections</tag>
        <tag>Set</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Data Types and Variables</title>
    <url>/2021/javascript-basics/</url>
    <content><![CDATA[<p>JavaScript is a <em><strong>dynamic programming language</strong></em> which means that operations otherwise done at the compile-time can be done at run-time. JavaScript is a <em><strong>loosely typed</strong></em> language as well. Variables in JavaScript are not directly associated with any particular value type and any variables can be assigned values of <em><strong>all types</strong></em>.</p>
<p>In JavaScript, a variable may store two types of value: <code>primitive</code> and <code>reference</code>.</p>
<ul>
<li>Primitive Data Types characteristics:
<ul>
<li>Stored directly in the location the variable accesses</li>
<li>Size of the primitive value is fixed and stored on the stack</li>
<li>Accessed by value (manipulate the actual value stored in the variable)</li>
</ul>
</li>
<li>Reference Data Types characteristics:
<ul>
<li>Accessed by reference</li>
<li>Size of reference value is dynamic and objects are stored on the heap</li>
<li>A pointer to a location in memory</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h3 id="primitives"><a class="markdownIt-Anchor" href="#primitives"></a> Primitives</h3>
<p><strong><code>Number</code></strong> for numbers of any kind: integer or floating-point. Integers are limited by <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>±</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mn>53</mn></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\pm (2^{53}-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">±</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>. Special number includes: <code>Infinity</code>, <code>-Infinity</code> and <code>NaN</code>.</p>
<p><strong><code>BigInt</code></strong> is for integer number of arbitrary length</p>
<p><strong><code>String</code></strong> for strings. A String may have zero or more characters, there’s no separate single character type.</p>
<ol>
<li>Double quotes : <code>&quot;Hello&quot;</code></li>
<li>Single quotes : <code>'Hello'</code></li>
<li>Backticks :  <code>Hellow</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">alert(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span> ); <span class="comment">// Hellow, John!</span></span><br></pre></td></tr></table></figure>
<p><strong><code>Boolean</code></strong> for <code>true</code> or <code>false</code></p>
<p><strong><code>null</code></strong> for unknown values - a standalone type that has a single value <code>null</code>.</p>
<p><strong><code>undefined</code></strong> for unassigned values - a standalone type that has a single value. If a variable is declared, but not assigned, then its value is undefined.</p>
<p><strong><code>Symbol</code></strong> is used to create unique identifiers for objects.</p>
<h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3>
<p><strong><code>Object</code></strong> used to store collections of data and more complex entities. It can includes:</p>
<ul>
<li>Arrays, Object literals, Functions, Dates, … etc</li>
</ul>
<hr />
<h3 id="type-conversion"><a class="markdownIt-Anchor" href="#type-conversion"></a> Type Conversion</h3>
<p>Convert Number to String:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">val = <span class="built_in">String</span>(<span class="number">555</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(val); <span class="comment">// 555</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> val) <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(val.length) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>Convert Boolean to String:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">val = <span class="built_in">String</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(val); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> val) <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(val.length) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
<p>Convert Date to String:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">val = <span class="built_in">String</span>(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(val); <span class="comment">// Fri Jan 15 2021 13:40:08 GMT-0500 (Eastern Standard Time)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> val) <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(val.length) <span class="comment">// 57</span></span><br></pre></td></tr></table></figure>
<p>Convert Array to String:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">val = <span class="built_in">String</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(val); <span class="comment">// 1,2,3,4,5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> val) <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(val.length) <span class="comment">// 9</span></span><br></pre></td></tr></table></figure>
<p><em><strong>toString()</strong></em> method:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">val = (<span class="number">5</span>).toString();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(val); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> val) <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(val.length) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<hr />
<p>Convert String to Number:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">val = <span class="built_in">Number</span>(<span class="string">&#x27;5&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(val); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> val) <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(val.toFixed()) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<p>Convert Boolean to Number:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">val = <span class="built_in">Number</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(val); <span class="comment">// 1 for true, 0 for false and null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> val) <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(val.toFixed()) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>Convert Date to Number:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">val = <span class="built_in">Number</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(val); <span class="comment">// 1 for true, 0 for false and null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> val) <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(val.toFixed()) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>Convert Non-numeric value to Number:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">val = <span class="built_in">Number</span>(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(val); <span class="comment">// 1610736853895</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> val) <span class="comment">// number</span></span><br></pre></td></tr></table></figure>
<p><em><strong>parseInt()</strong></em> and <em><strong>parseFloat()</strong></em> method:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">val = <span class="built_in">parseInt</span>(<span class="string">&#x27;100.30&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(val); <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> val) <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(val.toFixed()) <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">val = <span class="built_in">parseFloat</span>(<span class="string">&#x27;100.31&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(val); <span class="comment">// 100.31</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> val) <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(val.toFixed()) <span class="comment">// 100.3100</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript Road Map</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Collections.Queue 集合工具类二(Queue)</title>
    <url>/2020/java-collections-queue/</url>
    <content><![CDATA[<h2 id="queue-interface-overview"><a class="markdownIt-Anchor" href="#queue-interface-overview"></a> Queue Interface Overview</h2>
<p><img src="/2020/java-collections-queue/overview.jpg" alt="overview" /></p>
<p><code>Queue</code> is a collection designed for holding elements prior to processing. Besides basic <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Collection.html"><code>Collection</code></a> operations, queues provide additional insertion, extraction, and inspection operations. Each of these methods exists in two forms:</p>
<a id="more"></a>
<ul>
<li>one throws an exception if the operation fails</li>
<li>the other returns a special value (either <code>null</code> or <code>false</code>, depending on the operation).</li>
</ul>
<p>The latter form of the insert operation is designed specifically for use with capacity-restricted <code>Queue</code> implementations; in most implementations, insert operations cannot fail.</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">throws Exception</th>
<th style="text-align:center">Returns special value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">insert</td>
<td style="text-align:center">add(e)</td>
<td style="text-align:center">offer(e)</td>
</tr>
<tr>
<td style="text-align:center">remove</td>
<td style="text-align:center">remove()</td>
<td style="text-align:center">poll()</td>
</tr>
<tr>
<td style="text-align:center">examine</td>
<td style="text-align:center">element()</td>
<td style="text-align:center">peek()</td>
</tr>
</tbody>
</table>
<hr />
<h3 id="priorityqueue"><a class="markdownIt-Anchor" href="#priorityqueue"></a> <code>PriorityQueue</code></h3>
<h4 id="basic-concept"><a class="markdownIt-Anchor" href="#basic-concept"></a> Basic Concept</h4>
<p>A priority queue is an Abstract Data Type that operates similar to a normal queue except that <em><strong>each element has a certain priority</strong></em>. The priority of the element in the priority queue determine the order in which elements are removed from the PQ.</p>
<p>The most common implementation of a PQ is using <code>binary heap</code> (二叉小顶堆).</p>
<p><img src="/2020/java-collections-queue/priorityqueue.jpg" alt="overview" /></p>
<p>Indexing:</p>
<ul>
<li>Parent node index : i</li>
<li>Left child node index : 2i</li>
<li>Right child node index : 2i + 1</li>
<li>Parent node = ( node_index - 1 )  / 2</li>
</ul>
<hr />
<p><strong>Strength</strong>:</p>
<ul>
<li>Quickly access the highest-priority item. Peek at the top item in <em><strong>O(1)</strong></em> while keeping other operations relatively cheap ***O(log(n))***.</li>
</ul>
<p><strong>Weakness</strong>:</p>
<ul>
<li>Slow enqueues and dequeues. Both operations take <em><strong>O(log(n))</strong></em> time with priority queues. With normal FIFO queues, the operations are <em><strong>O(1)</strong></em> time.</li>
</ul>
<hr />
<h4 id="java-api"><a class="markdownIt-Anchor" href="#java-api"></a> Java API</h4>
<p>A <code>PriorityQueue</code> is used when the objects are supposed to be processed based on the priority. It is known that a <a href="https://www.geeksforgeeks.org/queue-interface-java/">Queue</a> follows the <code>First-In-First-Out</code> algorithm. The PriorityQueue is based on the priority heap. The elements of the priority queue are ordered according to the natural ordering, or by a Comparator provided at queue construction time, depending on which constructor is used. It implements <code>Serializable</code>, <code>Iterable&lt;E&gt;</code>, <code>Collection&lt;E&gt;</code>,  <code>Queue</code> interfaces.</p>
<p>Characteristics:</p>
<ul>
<li>Does not permit <code>null</code></li>
<li>Can’t create PriorityQueue of objects that are non-comparable</li>
<li>PriorityQueue are unbounded queues</li>
<li>Not thread-safe, use <code>PriorityBlockingQueue</code> class for multi-threading</li>
<li><em><strong>O(log(n))</strong></em> for <code>add</code> and <code>poll</code></li>
</ul>
<hr />
<h5 id="insert-element-and-shiftup"><a class="markdownIt-Anchor" href="#insert-element-and-shiftup"></a> Insert Element and ShiftUp</h5>
<p><code>add(e)</code> and <code>offer(e)</code> are equivalent except for the exception handling. add(e) throws exception while offer(e) returns null.</p>
<p><img src="/2020/java-collections-queue/insert.png" alt="insert" /></p>
<p><code>Offer(e)</code> method implementation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> i = size;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= queue.length)</span><br><span class="line">        grow(i + <span class="number">1</span>);</span><br><span class="line">    size = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">        queue[<span class="number">0</span>] = e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftUp(i, e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>siftUp(i, e)</code> method implementation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftUp</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="keyword">null</span>)</span><br><span class="line">        siftUpUsingComparator(k, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftUpComparable(k, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftUpComparable</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    Comparable&lt;? <span class="keyword">super</span> E&gt; key = (Comparable&lt;? <span class="keyword">super</span> E&gt;) x;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> parent = (k - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">1</span>; <span class="comment">// parent node = (node-1)/2</span></span><br><span class="line">        Object e = queue[parent];</span><br><span class="line">        <span class="keyword">if</span> (key.compareTo((E) e) &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = e;</span><br><span class="line">        k = parent;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h5 id="peekelement"><a class="markdownIt-Anchor" href="#peekelement"></a> Peek/Element</h5>
<p><code>peek()</code> and <code>element()</code> are equivalent except for the exception handling. <code>peek()</code> returns <code>null</code> while <code>element()</code> throws exception.</p>
<p>peek() implementation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (size == <span class="number">0</span>) ? <span class="keyword">null</span> : (E) queue[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h5 id="remove-head-element"><a class="markdownIt-Anchor" href="#remove-head-element"></a> Remove head element</h5>
<p><code>poll()</code> and <code>remove()</code> are equivalent except for the exception handling. <code>remove()</code> returns <code>null</code> while <code>poll()</code> throws exception.</p>
<p><img src="/2020/java-collections-queue/remove.png" alt="remove" /></p>
<p><code>poll()</code> method implementation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> s = --size;</span><br><span class="line">    modCount++;</span><br><span class="line">    E result = (E) queue[<span class="number">0</span>];</span><br><span class="line">    E x = (E) queue[s];</span><br><span class="line">    queue[s] = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (s != <span class="number">0</span>)</span><br><span class="line">        siftDown(<span class="number">0</span>, x);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>shiftDown(i, e)</code> method implementation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDown</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="keyword">null</span>)</span><br><span class="line">        siftDownUsingComparator(k, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftDownComparable(k, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDownComparable</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    Comparable&lt;? <span class="keyword">super</span> E&gt; key = (Comparable&lt;? <span class="keyword">super</span> E&gt;)x;</span><br><span class="line">    <span class="keyword">int</span> half = size &gt;&gt;&gt; <span class="number">1</span>;        <span class="comment">// loop while a non-leaf</span></span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>; <span class="comment">// assume left child is least</span></span><br><span class="line">        Object c = queue[child];</span><br><span class="line">        <span class="keyword">int</span> right = child + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">            ((Comparable&lt;? <span class="keyword">super</span> E&gt;) c).compareTo((E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="keyword">if</span> (key.compareTo((E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h5 id="remove-specific-element"><a class="markdownIt-Anchor" href="#remove-specific-element"></a> Remove specific element</h5>
<p>There are two scenarios:</p>
<ul>
<li>
<p>The element to be removed is the last element:</p>
<ul>
<li>Delete immediately without modifying the queue structure</li>
</ul>
</li>
<li>
<p>The element is at somewhere else:</p>
<ul>
<li>Apply shiftDown from the element to be removed with the last element in the queue.</li>
</ul>
</li>
</ul>
<p><img src="/2020/java-collections-queue/removeat.png" alt="removeat" /></p>
<p><code>remove(o)</code> implementation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = indexOf(o);</span><br><span class="line">    <span class="keyword">if</span> (i == -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        removeAt(i);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">removeAt</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert i &gt;= 0 &amp;&amp; i &lt; size;</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> s = --size;</span><br><span class="line">    <span class="keyword">if</span> (s == i) <span class="comment">// removed last element</span></span><br><span class="line">        queue[i] = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        E moved = (E) queue[s];</span><br><span class="line">        queue[s] = <span class="keyword">null</span>;</span><br><span class="line">        siftDown(i, moved);</span><br><span class="line">        <span class="keyword">if</span> (queue[i] == moved) &#123;</span><br><span class="line">            siftUp(i, moved);</span><br><span class="line">            <span class="keyword">if</span> (queue[i] != moved)</span><br><span class="line">                <span class="keyword">return</span> moved;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="deque-interface"><a class="markdownIt-Anchor" href="#deque-interface"></a> Deque Interface</h2>
<p><code>Deque</code> stands for <code>Double Ended Queue</code>, which means this is a queue that can be accessed by both ends, and therefore can be used with both <code>FIFO</code> and <code>LIFO</code> styles. By default, it organizes its element <code>LIFO</code> style, meaning that getting the first in the <code>Deque</code> would return the last that had been added.</p>
<p>The <code>Deque</code> interface has the following implementations:</p>
<ul>
<li>LinkedList</li>
<li>ArrayDeque</li>
</ul>
<p>This interface defines methods to access the elements at both ends of the deque. Methods are provided to insert, remove, and examine the element. Each of these methods exists in two forms: one throws an exception if the operation fails, the other returns a special value (either <code>null</code> or <code>false</code>, depending on the operation). The latter form of the insert operation is designed specifically for use with capacity-restricted <code>Deque</code> implementations; in most implementations, insert operations cannot fail.</p>
<p><img src="/2020/java-collections-queue/deque.png" alt="deque" /></p>
<p>This interface extends the <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Queue.html"><code>Queue</code></a> interface. When a deque is used as a queue, FIFO (First-In-First-Out) behavior results. Elements are added at the end of the deque and removed from the beginning. The methods inherited from the <code>Queue</code> interface are precisely equivalent to <code>Deque</code> methods as indicated in the following table:</p>
<p><img src="/2020/java-collections-queue/deque1.png" alt="deque1" /></p>
<p>Deques can also be used as LIFO (Last-In-First-Out) stacks. This interface should be used in preference to the legacy <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Stack.html"><code>Stack</code></a> class. When a deque is used as a stack, elements are pushed and popped from the beginning of the deque. Stack methods are precisely equivalent to <code>Deque</code> methods as indicated in the table below:</p>
<p><img src="/2020/java-collections-queue/deque2.png" alt="deque2" /></p>
<hr />
<h3 id="arraydeque"><a class="markdownIt-Anchor" href="#arraydeque"></a> <code>ArrayDeque</code></h3>
<p>Resizable-array implementation of the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html"><code>Deque</code></a> interface. Array deques have no capacity restrictions; they grow as necessary to support usage. They are not thread-safe. Null elements are prohibited.  Most <code>ArrayDeque</code> operations run in <code>amortized</code> constant time.</p>
<ul>
<li>faster than <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Stack.html"><code>Stack</code></a> when used as a stack, and</li>
<li>faster than <a href="https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html"><code>LinkedList</code></a> when used as a queue.</li>
</ul>
<p>Under the hood, <code>ArrayDeque</code> is backed by an array which doubles its size when it gets filled with an initial capacity of 16. Internally, It uses a <code>head</code> and <code>tail</code> as pointer to the index of the first and last elements in the array.</p>
<ul>
<li><strong>head</strong>: the index of the element at the head of queue (which is the element to be removed by <code>remove()</code> and <code>pop()</code> method)</li>
<li><strong>tail</strong>: the index at which the next element would be added to the tail of the queue (via <code>addLast(E)</code>, <code>add(E)</code>, <code>push(E)</code>)</li>
</ul>
<hr />
<h4 id="use-arraydeque-as-stack"><a class="markdownIt-Anchor" href="#use-arraydeque-as-stack"></a> Use <code>ArrayDeque</code> as <code>Stack</code></h4>
<p><img src="/2020/java-collections-queue/dequestack.png" alt="dequestack" /></p>
<p>Add an element using <code>push(e)</code> and remove the last element using <code>pop()</code></p>
<p>Internally:</p>
<ul>
<li><code>push(e)</code> calls <code>addFirst(e)</code></li>
<li><code>pop()</code> calls <code>removeFirst()</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arraydeque_as_stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Deque&lt;String&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    stack.push(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">    stack.push(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">    stack.push(<span class="string">&quot;third&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;Initial Stack: &quot;</span> + stack);</span><br><span class="line">    stack.pop();</span><br><span class="line">    System.out.println(<span class="string">&quot;Stack after pop(): &quot;</span> + stack);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// equivalent in using addFirst and removeFirst</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arraydeque_addFirst_removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Deque&lt;String&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    queue.addFirst(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">    queue.addFirst(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">    queue.addFirst(<span class="string">&quot;third&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;Initial queue addFirst(): &quot;</span> + queue);</span><br><span class="line">    queue.removeFirst();</span><br><span class="line">    System.out.println(<span class="string">&quot;queue after removeFirst(): &quot;</span> + queue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Initial Stack: [third, second, first]</span><br><span class="line">Stack after pop(): [second, first]</span><br></pre></td></tr></table></figure>
<hr />
<h4 id="use-arraydeque-as-queue"><a class="markdownIt-Anchor" href="#use-arraydeque-as-queue"></a> Use <code>ArrayDeque</code> as <code>Queue</code></h4>
<p><img src="/2020/java-collections-queue/dequequeue.png" alt="dequequeue" /></p>
<p>Add an element using <code>offer(e)</code> and remove the first element using <code>poll()</code></p>
<p>Internally:</p>
<ul>
<li><code>offer(e)</code> calls <code>offerLast(e)</code></li>
<li><code>poll()</code> calls <code>pollFirst()</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arraydeque_as_queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Deque&lt;String&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">      queue.offer(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">      queue.offer(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">      queue.offer(<span class="string">&quot;third&quot;</span>);</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;Initial queue: &quot;</span> + queue);</span><br><span class="line">      queue.poll();</span><br><span class="line">      System.out.println(<span class="string">&quot;queue after pop(): &quot;</span> + queue);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// equivalent in using addLast and removeFirst</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arraydeque_addLast_removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Deque&lt;String&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">      queue.addLast(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">      queue.addLast(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">      queue.addLast(<span class="string">&quot;third&quot;</span>);</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;Initial queue addLast(): &quot;</span> + queue);</span><br><span class="line">      queue.removeFirst();</span><br><span class="line">      System.out.println(<span class="string">&quot;queue after removeFirst(): &quot;</span> + queue);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Ouput:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Initial queue: [first, second, third]</span><br><span class="line">queue after pop(): [second, third]</span><br></pre></td></tr></table></figure>
<hr />
<h4 id="capacity-expansion"><a class="markdownIt-Anchor" href="#capacity-expansion"></a> Capacity Expansion</h4>
<p>Everytime an element is added into the<code>ArrayDeque</code>, it compares the <code>head</code> pointer and the <code>tail</code> pointer. If they are equal, it indicates that the array is full.</p>
<p><img src="/2020/java-collections-queue/capacity1.png" alt="capacity1" /></p>
<p>Then <code>doubleCapacity()</code> will be called:</p>
<p><img src="/2020/java-collections-queue/capacity2.png" alt="capacity2" /></p>
]]></content>
      <categories>
        <category>Java Road Map</category>
      </categories>
      <tags>
        <tag>Java Basics</tag>
        <tag>Collections</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Map 集合工具类三(Map)</title>
    <url>/2020/java-collections-map/</url>
    <content><![CDATA[<h2 id="map-interface-overview"><a class="markdownIt-Anchor" href="#map-interface-overview"></a> Map Interface Overview</h2>
<p><img src="/2020/java-collections-map/overview.jpg" alt="overview" /></p>
<p>Java <code>Map</code> interface is one of the most important and most widely used API. A <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html"><code>Map</code></a> is an object that maps keys to values. A map cannot contain duplicate keys: Each key can map to at most one value.</p>
<a id="more"></a>
<hr />
<h3 id="hashmap"><a class="markdownIt-Anchor" href="#hashmap"></a> <code>HashMap</code></h3>
<p>Java <code>HashMap</code> class implements the <code>Map</code> interface which allows to store key and value pair, where keys should be <em><strong>unique</strong></em>.</p>
<ul>
<li>Java HashMap allows null key and null values</li>
<li>HashMap is not an ordered collection. <code>HashMap.keySet()</code> is not in order of their addition.</li>
<li>HashMap is <em><strong>not synchronized</strong></em>.</li>
<li>HashMap stores entries into multiple singly linked lists, called buckets or bins. Default number of bins is <em><strong>16</strong></em> and it’s always in power of 2.</li>
<li>HashMap is <em><strong>not thread safe</strong></em>, <code>ConcurrentHashMap</code> should be used or get synchronized map using <code>Collections.synchronizedMap()</code> method.</li>
</ul>
<hr />
<h4 id="architecture"><a class="markdownIt-Anchor" href="#architecture"></a> Architecture</h4>
<p>The architecture of <code>HashMap</code> is as follow:</p>
<ul>
<li>Internally, an array of <code>Node&lt;K,V&gt;</code> class is used to store the data, also known as a <strong>bucket</strong>.</li>
<li><code>Node&lt;K,V&gt;</code> has four attributes:
<ul>
<li><code>int hash</code> , <code>K key</code>,  <code>V value</code>, <code>Node&lt;K,V&gt; next</code></li>
</ul>
</li>
<li>Bucket has a <code>LinkedList</code> data structure to store multiple nodes.</li>
<li>Array is fast in terms of search with <em><strong>O(1)</strong></em> time, inserting and deleting is slower and has <em><strong>O(n)</strong></em> time. On the onter hand, LinkedList is fast for inserting and deleting while slow for searching. HashMap utilizes the different characteristics of the two data structures to enhance its performance.</li>
</ul>
<p><img src="/2020/java-collections-map/hashmap.png" alt="hashmap" /></p>
<hr />
<h4 id="initialization"><a class="markdownIt-Anchor" href="#initialization"></a> Initialization</h4>
<p>Upon intitialization, there are two attributes that are important:</p>
<ul>
<li>InitialCapacity:  It specified the initial capacity of the array (number of buckets). By default, it is set to <strong>16</strong>.</li>
<li>loadFactor: It is a measure that decides when to increase the HashMap capacity to maintain the <code>get()</code> and <code>put()</code> operation complexity of ***O(1)**<em>. Be default. it is set to be <strong>0.75f</strong>. When number of buckets filled equals to initial Capacity</em>loadFactor, the size will be doubled.</li>
</ul>
<p>Constructors:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># initial capacity 16, load factor 0.75</span><br><span class="line">Map&lt;String, String&gt; map1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"># specify initial capacity, load factor 0.75</span><br><span class="line">Map&lt;String, String&gt; map2 = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>^<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"># specify initial capacity and load factor</span><br><span class="line">Map&lt;String, String&gt; map3 = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">32</span>,<span class="number">0.80f</span>);</span><br><span class="line"></span><br><span class="line"># creates a Map having same mappings as the specified map with load </span><br><span class="line"># factor 0.75</span><br><span class="line">Map&lt;String,String&gt; map4 = <span class="keyword">new</span> HashMap&lt;&gt;(map1);</span><br></pre></td></tr></table></figure>
<hr />
<h4 id="hashing-mechanism"><a class="markdownIt-Anchor" href="#hashing-mechanism"></a> Hashing Mechanism</h4>
<p>Hashing is designed to solve the problem of needing to efficiently find or store an item in a collection.</p>
<ul>
<li><strong>HashCode()</strong> method :
<ul>
<li>It returns the memory reference of the object in integer form. Hash code for <code>null</code> object is <strong>0</strong>.</li>
</ul>
</li>
<li><strong>equals()</strong> method:
<ul>
<li>It checks the equality of two objects. It can be overriden.</li>
<li>If <strong>equals()</strong> method is overriden, it is mandatory to override the <strong>hashCode()</strong> method as well.</li>
</ul>
</li>
</ul>
<p>Generally, the hashCode() and equals() method should follow the following rules:</p>
<ol>
<li>If <code>obj1.equals(obj2)</code>, then <code>obj1.hashCode()==obj2.hashCode()</code> should always be true.</li>
<li>If <code>obj1.hashCode()==obj2.hashCode()</code> is true, <code>obj1.equals(obj2)</code> does not have to be true.</li>
</ol>
<hr />
<p>In <code>HashMap</code>, the hashing mechanism works in two steps:</p>
<ul>
<li>When an entry is added into the HashMap, it computes the hashcode on the key of the entry using <code>hashCode()</code>. ==&gt; <em><strong>first hash</strong></em></li>
<li>The bitwise XOR operator is then used to spread the higher bits to  lowers. ==&gt; <em><strong>second hash</strong></em></li>
</ul>
<p>The implementations:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Based on the hash code computed, the index of the bucket for the enrty to be put into is then calculated:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">index = (n-<span class="number">1</span>) &amp; hash <span class="comment">// n is the size of the bucket</span></span><br></pre></td></tr></table></figure>
<p>A <strong>Hash Collision</strong> is a situation where <strong>two or more key objects produce the same final hash value</strong> and hence point to the same bucket location or array index. This scenario can occur because according to the <em>equals</em> and <em>hashCode</em> contract, <strong>two unequal objects in Java can have the same hash code</strong>. It can also happen because of the finite size of the underlying array, that is, before resizing. The smaller this array, the higher the chances of collision.</p>
<hr />
<h4 id="hashmap-put-k-v-method"><a class="markdownIt-Anchor" href="#hashmap-put-k-v-method"></a> HashMap put( K, V ) Method</h4>
<p>The flow chart below demonstrates the execution logic of <code>put</code> method:</p>
<p><img src="/2020/java-collections-map/hashmap2.png" alt="hashmap" /></p>
<p>Source code for JDK1.8 HashMap:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// If table is empty or length == 0</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// Calculate hash value and put in the entry</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// If key already exists, replace the value</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// If the bin is a red black tree</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          	<span class="comment">// If the bin is a linkedlist</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                  	<span class="comment">// If linkedlist length greater than 8, treeify</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Key already exists, replace the value</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// resize if the size greater than threshold capacity</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
<hr />
<h4 id="hashmap-getobject-key-method"><a class="markdownIt-Anchor" href="#hashmap-getobject-key-method"></a> HashMap get(Object key) Method</h4>
<p>The get method is straightforward, based on the hash code computed for the input key, it finds the bucket corresponds to the hash value and iterate through all the map entries stored there. <em><strong>equals()</strong></em> is used to compare the key and if no such key available, <code>null</code> is returned.</p>
<p>Source code for JDK1.8 HashMap:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
<h4 id="examples"><a class="markdownIt-Anchor" href="#examples"></a> Examples</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// create a HashMap instance</span></span><br><span class="line">    HashMap&lt;String, String&gt; hm = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    <span class="comment">// put entries into the HashMap</span></span><br><span class="line">    hm.put(<span class="string">&quot;Canada&quot;</span>, <span class="string">&quot;Montreal&quot;</span>);</span><br><span class="line">    hm.put(<span class="string">&quot;America&quot;</span>, <span class="string">&quot;New York&quot;</span>);</span><br><span class="line">    hm.put(<span class="string">&quot;Korea&quot;</span>, <span class="string">&quot;Soul&quot;</span>);</span><br><span class="line">    hm.put(<span class="string">&quot;China&quot;</span>, <span class="string">&quot;Shanghai&quot;</span>);</span><br><span class="line">    hm.put(<span class="string">&quot;China&quot;</span>, <span class="string">&quot;Beijing&quot;</span>); <span class="comment">// duplicated key</span></span><br><span class="line">    System.out.println(hm);</span><br><span class="line">    System.out.println(hm.get(<span class="string">&quot;China&quot;</span>)); <span class="comment">// get the value for a key</span></span><br><span class="line">    <span class="comment">// iterate through the HashMap key set</span></span><br><span class="line">    <span class="keyword">for</span>(String s: hm.keySet()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;key: &quot;</span> + s + <span class="string">&quot;; value: &quot;</span> + hm.get(s));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// iterate through the HashMap values</span></span><br><span class="line">    <span class="keyword">for</span> (String value: hm.values()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;value: &quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;China&#x3D;Beijing, Korea&#x3D;Soul, Canada&#x3D;Montreal, America&#x3D;New York&#125;</span><br><span class="line">Beijing</span><br><span class="line">key: China; value: Beijing</span><br><span class="line">key: Korea; value: Soul</span><br><span class="line">key: Canada; value: Montreal</span><br><span class="line">key: America; value: New York</span><br><span class="line">value: Beijing</span><br><span class="line">value: Soul</span><br><span class="line">value: Montreal</span><br><span class="line">value: New York</span><br></pre></td></tr></table></figure>
<hr />
<h3 id="hashtable"><a class="markdownIt-Anchor" href="#hashtable"></a> <code>HashTable</code></h3>
<p>The <code>HashTable</code> class implements a hash table, which maps keys to values. Any non-null object can be used as a key or as a value. To successfully store and retrieve objects from a <code>HashTable</code>, the objects used as keys must implement the <code>hashCode()</code> method and <code>equals()</code> method. Generally, HashTable is vert similar to HashMap except for the following differenes:</p>
<ul>
<li>HashTable is <em><strong>synchronized</strong></em></li>
<li>The initial capacity of <code>HashTable</code> class is <em><strong>11</strong></em>, whereas loadFactor is <em><strong>0.75</strong></em></li>
<li>HashTable implements <code>Serializable</code>, <code>Cloneable</code>, <code>Map&lt;K,V&gt;</code> interface as well as <code>Dictionary&lt;K,V&gt;</code></li>
</ul>
<h4 id="example"><a class="markdownIt-Anchor" href="#example"></a> Example</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Hashtable&lt;String, String&gt; ht = <span class="keyword">new</span> Hashtable&lt;String, String&gt;();</span><br><span class="line">    ht.put(<span class="string">&quot;Canada&quot;</span>, <span class="string">&quot;Montreal&quot;</span>);</span><br><span class="line">    ht.put(<span class="string">&quot;America&quot;</span>, <span class="string">&quot;New York&quot;</span>);</span><br><span class="line">    ht.put(<span class="string">&quot;Korea&quot;</span>, <span class="string">&quot;Soul&quot;</span>);</span><br><span class="line">    ht.put(<span class="string">&quot;China&quot;</span>, <span class="string">&quot;Shanghai&quot;</span>);</span><br><span class="line">    ht.put(<span class="string">&quot;China&quot;</span>, <span class="string">&quot;Beijing&quot;</span>); <span class="comment">// duplicated key</span></span><br><span class="line">    System.out.println(ht);</span><br><span class="line">    System.out.println(ht.get(<span class="string">&quot;China&quot;</span>)); <span class="comment">// get the value for a key</span></span><br><span class="line">    <span class="comment">// iterate through the HashMap key set</span></span><br><span class="line">    <span class="keyword">for</span>(String s: ht.keySet()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;key: &quot;</span> + s + <span class="string">&quot;; value: &quot;</span> + ht.get(s));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// iterate through the HashMap values</span></span><br><span class="line">    <span class="keyword">for</span> (String value: ht.values()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;value: &quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;China&#x3D;Beijing, Korea&#x3D;Soul, Canada&#x3D;Montreal, America&#x3D;New York&#125;</span><br><span class="line">Beijing</span><br><span class="line">key: China; value: Beijing</span><br><span class="line">key: Korea; value: Soul</span><br><span class="line">key: Canada; value: Montreal</span><br><span class="line">key: America; value: New York</span><br><span class="line">value: Beijing</span><br><span class="line">value: Soul</span><br><span class="line">value: Montreal</span><br><span class="line">value: New York</span><br></pre></td></tr></table></figure>
<hr />
<h4 id="hashtable-usage"><a class="markdownIt-Anchor" href="#hashtable-usage"></a> HashTable Usage</h4>
<p>Java <code>HashTable</code> has been considered to be <em><strong>deprecated</strong></em>, and in fact, most of the synchronized collections have been deprecated. Synchronization has a cost and using synchronized collection in places where there is no need of it leads to useless utilization of resources. Under multi-threaded environment, Java <code>ConcurrentHashMap</code> is a good alternative which provides better performance than <code>HashTable</code>.</p>
<hr />
<h3 id="linkedhashmap"><a class="markdownIt-Anchor" href="#linkedhashmap"></a> <code>LinkedHashMap</code></h3>
<p>The <code>LinkedHashMap</code> is just like <a href="http://www.geeksforgeeks.org/java-util-hashmap-in-java/">HashMap</a> with an additional feature of maintaining an order of elements inserted into it. HashMap provided the advantage of quick insertion, search, and deletion but it never maintained the track and order of insertion which the LinkedHashMap provides where the elements can be <strong>accessed in their insertion order</strong>.</p>
<p>Important features of LinkedHahsMap:</p>
<ul>
<li><code>LinkedList</code> implements <code>Map</code> interface and extends the <code>HashMap</code> class</li>
<li>It allows only unique elements</li>
<li>It allows one <code>null</code> key and multiple <code>null</code> values</li>
<li>It is <em><strong>not synchronized</strong></em></li>
<li>It is provides additional functionalities of maintaining insertion order of elements</li>
</ul>
<hr />
<h4 id="map-entries"><a class="markdownIt-Anchor" href="#map-entries"></a> Map Entries</h4>
<p>To maintain the order of elements, the linked hashmap modifies the <em>Map.Entry</em> class of <em>HashMap</em> by adding pointers to the next and previous entries:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; before, after;</span><br><span class="line">    Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Two pointers: <em><strong>head</strong></em> and <em><strong>tail</strong></em> are added which enables itself to hook to the linked list.</p>
<hr />
<h4 id="architecture-2"><a class="markdownIt-Anchor" href="#architecture-2"></a> Architecture</h4>
<ol>
<li>If <code>accessOrder == false</code>, it will result in insertion order.</li>
</ol>
<p>The architecture is similar to that of HashMap:</p>
<p><img src="/2020/java-collections-map/linkedhashmap1.png" alt="linkedhashmap1" /></p>
<p>The above diagram shows the structure of the LinkedHashMap when <code>accessOrder = false</code> which is the default setting. The insertion order is maintained through the doubly linkedlist. When a <code>put(K,V)</code> is called, the entry is put to the tail of the linkedlist.</p>
<hr />
<ol start="2">
<li>If <code>accessOrder == true</code>, the it will result in access order. One of the important application of access order LinkedHashMap is building <em><strong>LRU</strong></em> cache.</li>
</ol>
<p><img src="/2020/java-collections-map/linkedhashmap2.png" alt="linkedhashmap2" /></p>
<p>The above diagram shows the structure of the LinkedHashMap when <code>accessOrder = true</code>. The doubly linkedlists of the nodes preserve the order by which they are accessed. The least recently accessed element will become the head, while the most recently accessed element becomes the tail.</p>
<blockquote>
<p>A structural modification is any operation that adds or deletes one or more mappings or, in the case of access-ordered linked hash maps, affects iteration order.  In insertion-ordered linked hash maps, merely changing the value associated with a key that is already contained in the map is not a structural modification.  In access-ordered linked hash maps, merely querying the map with <tt>get</tt> is a structural modification.</p>
</blockquote>
<hr />
<p><code>LinkedHashMap</code> class overridestes multiple functions that helps it to maintain the doubly linked list as well as preserve the insertion or access order. Below is an overview of the execution flow:</p>
<p><img src="/2020/java-collections-map/linkedhashmap3.png" alt="linkedhashmap3" /></p>
<p>The implementation of the specific functionalities will be discussed in the following subsections.</p>
<hr />
<h4 id="linkedhashmapput-k-v-method"><a class="markdownIt-Anchor" href="#linkedhashmapput-k-v-method"></a> LinkedHashMap.put( K, V ) Method</h4>
<p>LinkedHashMap reuses the <code>put</code> implementation from HashMap class. Everytime a new node is created and put into the bucket, <code>newNode(hash, key, value, next)</code> is called. However, the original method implementation could not perform operations related to the doubly linked list. Hence, <code>LinkedHashMap</code> class overridestes the <code>newNode</code> method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// Overriden by LinkedHashmap</span></span><br><span class="line"><span class="function">Node&lt;K,V&gt; <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; e)</span> </span>&#123;</span><br><span class="line">      LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">          <span class="keyword">new</span> LinkedHashMap.Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">      linkNodeLast(p);</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>The <code>linkNodeLast</code> method implementation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Implemented by LinkedHashmap</span></span><br><span class="line"><span class="comment">// link at the end of list</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkNodeLast</span><span class="params">(LinkedHashMap.Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; last = tail;</span><br><span class="line">        tail = p;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>)</span><br><span class="line">            head = p;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p.before = last;</span><br><span class="line">            last.after = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<hr />
<h4 id="linkedhashmapget-k-v-method"><a class="markdownIt-Anchor" href="#linkedhashmapget-k-v-method"></a> LinkedHashMap.get( K, V ) Method</h4>
<p>The <code>LinkedHashMap</code> overrides the <code>afterNodeAccess</code> method. By default, the linkedhashmap maintain the order of the elements by the order of insertion. If <code>accessOrder</code> is specified to be <code>true</code> during initialization, the order will be preserved by the access order. This can be easily done by moving the node to the tail of the doubly linked list when <code>get</code> or <code>getOrDefault</code> or <code>replace</code> methods are invoked. <code>afterNodeAccess</code> method overriden by LinkedHashMap provides such functionality:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// Overriden by LinkedHashMap</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">      Node&lt;K,V&gt; e;</span><br><span class="line">      <span class="keyword">if</span> ((e = getNode(hash(key), key)) == <span class="keyword">null</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (accessOrder)</span><br><span class="line">          afterNodeAccess(e);</span><br><span class="line">      <span class="keyword">return</span> e.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Overriden by LinkedHashMap</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// move node to last</span></span><br><span class="line">      LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">      <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">          LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">              (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">          p.after = <span class="keyword">null</span>;</span><br><span class="line">          <span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line">              head = a;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">              b.after = a;</span><br><span class="line">          <span class="keyword">if</span> (a != <span class="keyword">null</span>)</span><br><span class="line">              a.before = b;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">              last = b;</span><br><span class="line">          <span class="keyword">if</span> (last == <span class="keyword">null</span>)</span><br><span class="line">              head = p;</span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">              p.before = last;</span><br><span class="line">              last.after = p;</span><br><span class="line">          &#125;</span><br><span class="line">          tail = p;</span><br><span class="line">          ++modCount;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<hr />
<h4 id="linkedhashmapremove-k-method"><a class="markdownIt-Anchor" href="#linkedhashmapremove-k-method"></a> LinkedHashMap.remove (K) Method</h4>
<p>The LinkedHashMap class reuses the HashMap’s implementation for the removing the entries. However, in order to remove the entry from the doubly linked list, additional efforts has to be made as the parent class implementation could not do that. Hence, the hook method <code>afterRemoval</code> is overriden for this purpose. The <code>remove</code> and <code>removeNode</code> implementation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Implemented by HashMap</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">        <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implemented by HashMap</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,<span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                node = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// iterate through the list</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key ||</span><br><span class="line">                             (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                            node = e;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        p = e;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                                 (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">                <span class="comment">// remove the entry</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                    tab[index] = node.next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p.next = node.next;</span><br><span class="line">                ++modCount;</span><br><span class="line">                --size;</span><br><span class="line">                <span class="comment">// hook method to be called</span></span><br><span class="line">                afterNodeRemoval(node);</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The <code>afterNodeRemoval</code> implementation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Overriden by LinkedHashMap</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeRemoval</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// unlink</span></span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">        (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">    p.before = p.after = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line">        head = a;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        b.after = a;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="keyword">null</span>)</span><br><span class="line">        tail = b;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        a.before = b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h4 id="lru-cache-implementation-using-linkedhashmap"><a class="markdownIt-Anchor" href="#lru-cache-implementation-using-linkedhashmap"></a> LRU Cache Implementation Using LinkedHashMap</h4>
<p>Before looking at the <em><strong>Least Recently Used cache</strong></em>  problem, the LinkedHashMap overrides the <code>afterNodeInsertion</code> method which possibly removes eldest node from the list:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// Overriden by LinkedHashMap</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeInsertion</span><span class="params">(<span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">      LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">      <span class="keyword">if</span> (evict &amp;&amp; (first = head) != <span class="keyword">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">          K key = first.key;</span><br><span class="line">          removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// do nothing, always return false</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>After the <code>put</code> method is called, it invokes <code>afterNodeInsertion</code> method. By default, <code>afterNodeInsertion</code> does nothing as <code>removeEldestEntry</code> always return <code>false</code>.</p>
<blockquote>
<p>This method typically does not modify the map in any way, instead allowing the map to modify itself as directed by its return value. It is permitted for this method to modify the map directly, but if it does so, it must return false.</p>
</blockquote>
<p>Hence, the <code>removeEldestEntry (Map.Entry)</code> method may be overriden to impose a policy for removing stale mapping automatically when new mappings are added to the map. This is the key to implement a LRU cache using LinkedHashMap.</p>
<p>The problem description of the <em><strong>Least Recently Used cache</strong></em> problem can be found on <a href="https://leetcode.com/problems/lru-cache/solution/">leetcode</a>.</p>
<p>The implementation is as following:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">Integer</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(capacity, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getOrDefault(key, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;Integer, Integer&gt; eldest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() &gt; capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LRUCache cache = <span class="keyword">new</span> LRUCache(<span class="number">2</span>);</span><br><span class="line">        cache.put(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        cache.put(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">        cache.put(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">        cache.put(<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer value: cache.values()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;value: &quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Ouput:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">value: 3</span><br><span class="line">value: 4</span><br></pre></td></tr></table></figure>
<p>In the above implementation, when <code>size() &gt; capacity</code>, the <code>removeEldest</code> method will return true and as a result, the eldest node (head) will be removed.</p>
<p><strong>Efficiency</strong></p>
<ul>
<li>
<p>Time complexity: O(1) for both <code>put</code> and <code>get</code></p>
</li>
<li>
<p>Space complexity: O(capacity)</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java Road Map</category>
      </categories>
      <tags>
        <tag>Java Basics</tag>
        <tag>Collections</tag>
        <tag>Map</tag>
      </tags>
  </entry>
</search>
